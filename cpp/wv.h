#pragma once

/* Warning, this file is autogenerated by cbindgen. DO NOT modify this manually. */

#pragma comment(lib, "ws2_32.lib")
#pragma comment(lib, "userenv.lib")
#pragma comment(lib, "ntdll.lib")

enum class Datatype {
  Int,
  Float,
  Bool,
  String,
};

struct Weave;

struct WvDataField {
  const char *name;
  Datatype datatype;
};


extern "C" {

extern const size_t NIL;

void wv_add_component(Weave *wv, size_t entity, const char *name, const void *const *fields);

void wv_change_ends(Weave *wv, size_t id, size_t src, size_t tgt);

void wv_change_src(Weave *wv, size_t id, size_t src);

void wv_change_tgt(Weave *wv, size_t id, size_t tgt);

uint64_t wv_def_data(Weave *wv, const char *name, const WvDataField *datatype, size_t len);

void wv_delete_cascade(Weave *wv, size_t *id);

void wv_delete_orphan(Weave *wv, size_t *id);

void wv_free_weave(Weave *weave);

const void *wv_get_component(const Weave *wv, size_t entity, const char *name, size_t index);

size_t wv_get_data_field_count(const Weave *wv, const char *name);

WvDataField wv_get_data_field_type(const Weave *wv, const char *name, size_t index);

uint64_t wv_get_data_id(const Weave *wv, const char *name);

bool wv_has_component(const Weave *wv, size_t entity, const char *name);

bool wv_is_arrow(const Weave *wv, size_t id);

bool wv_is_knot(const Weave *wv, size_t id);

bool wv_is_mark(const Weave *wv, size_t id);

bool wv_is_nil(const Weave *wv, size_t id);

bool wv_is_tether(const Weave *wv, size_t id);

bool wv_is_valid(const Weave *wv, size_t id);

size_t wv_new_arrow(Weave *wv, size_t src, size_t tgt);

size_t wv_new_knot(Weave *wv);

size_t wv_new_mark(Weave *wv, size_t tgt);

size_t wv_new_tether(Weave *wv, size_t src);

Weave *wv_new_weave();

void wv_remove_component(Weave *wv, size_t entity, const char *name);

void wv_shape__connect(Weave *wv, size_t source, size_t len, const size_t *targets);

void wv_shape__dip(Weave *wv, size_t len, const size_t *arrows);

void wv_shape__focus(Weave *wv, size_t lens, size_t len, const size_t *observers);

void wv_shape__hoist(Weave *wv, size_t subject, size_t len, const size_t *objects);

void wv_shape__lift(Weave *wv, size_t len, const size_t *arrows);

/// SHAPE
void wv_shape__parent(Weave *wv, size_t root, size_t len, const size_t *children);

size_t wv_src(const Weave *wv, size_t id);

size_t wv_tgt(const Weave *wv, size_t id);

}  // extern "C"
